apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "homing-pigeon.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "homing-pigeon.name" . }}
    helm.sh/chart: {{ include "homing-pigeon.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ include "homing-pigeon.name" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "homing-pigeon.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  {{- with .Values.updateStrategy }}
  updateStrategy: {{ . }}
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "homing-pigeon.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if or .Values.podAnnotations .Values.tplPodAnnotations }}
      annotations:
{{- end }}
{{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tplPodAnnotations }}
{{- tpl . $ | nindent 8 }}
{{- end }}
    spec:
      {{- if or .Values.initContainers .Values.tplInitContainers }}
      initContainers:
      {{- end }}
      {{- with .Values.initContainers }}
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- with .Values.tplInitContainers }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      containers:
      {{- with .Values.extraContainers }}
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- $rqSocket :=  "" -}}
      {{- if .Values.requestMiddlewares -}}
        {{- if hasKey (index .Values.requestMiddlewares 0) "inSocket" }}
          {{- $rqSocket = (index .Values.requestMiddlewares 0).inSocket -}}
        {{- else }}
          {{- $rqSocket = printf "passthrough:///unix:///sockets/%s" (randAlphaNum 10) -}}
        {{- end }}
      {{- end }}
      {{- $rpSocket :=  "" -}}
      {{- if .Values.responseMiddlewares -}}
        {{- if hasKey (index .Values.responseMiddlewares 0) "inSocket" }}
          {{- $rpSocket = (index .Values.responseMiddlewares 0).inSocket -}}
        {{- else }}
          {{- $rpSocket = printf "passthrough:///unix:///sockets/%s" (randAlphaNum 10) -}}
        {{- end }}
      {{- end }}
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        {{- with .Values.consumerId }}
        - name: CONSUMER_ID
          value: {{ . }}
        {{- end }}
        {{- if .Values.writer.elasticsearch.enabled }}
        - name: ELASTICSEARCH_URL
          value: "{{ .Values.writer.elasticsearch.host }}"
        - name: ELASTICSEARCH_FLUSH_MAX_SIZE
          value: "{{ .Values.writer.elasticsearch.flushMaxSize }}"
        - name: ELASTICSEARCH_FLUSH_MAX_INTERVAL_MS
          value: "{{ .Values.writer.elasticsearch.flushMaxIntervalMs }}"
        {{- end }}
        {{- if .Values.reader.rabbitmq.enabled }}
        - name: RABBITMQ_URL
          value: "{{ .Values.reader.rabbitmq.url }}"
        {{- if .Values.reader.rabbitmq.caCertName }}
        - name: RABBITMQ_CA_PATH
          value: "/etc/ssl/certs/{{ .Values.reader.rabbitmq.caCertName }}"
        {{- end }}
        - name: RABBITMQ_DLX_NAME
          value: "{{ .Values.reader.rabbitmq.deadLettersExchangeName }}"
        - name: RABBITMQ_DLX_QUEUE_NAME
          value: "{{ .Values.reader.rabbitmq.deadLettersQueueName }}"
        - name: RABBITMQ_EXCHANGE_NAME
          value: "{{ .Values.reader.rabbitmq.exchangeName }}"
        - name: RABBITMQ_EXCHANGE_TYPE
          value: "{{ .Values.reader.rabbitmq.exchangeType }}"
        - name: RABBITMQ_EXCHANGE_INTERNAL
          value: "{{ .Values.reader.rabbitmq.exchangeInternal }}"
        - name: RABBITMQ_OUTER_EXCHANGE_NAME
          value: "{{ .Values.reader.rabbitmq.outerExchangeName }}"
        - name: RABBITMQ_OUTER_EXCHANGE_TYPE
          value: "{{ .Values.reader.rabbitmq.outerExchangeType }}"
        - name: RABBITMQ_OUTER_EXCHANGE_BINDING_KEY
          value: "{{ .Values.reader.rabbitmq.outerExchangeBindingKey }}"
        - name: RABBITMQ_QUEUE_NAME
          value: "{{ .Values.reader.rabbitmq.queueName }}"
        - name: RABBITMQ_QUEUE_BINDING_KEY
          value: "{{ .Values.reader.rabbitmq.queueBindingKey }}"
        - name: RABBITMQ_QOS_PREFETCH_COUNT
          value: "{{ .Values.reader.rabbitmq.qos.prefetchCount }}"
        - name: RABBITMQ_CONSUMER_NAME
          value: "{{ .Values.reader.rabbitmq.consumerName }}"
        {{- end }}
        - name: MESSAGE_BUFFER_LENGTH
          value: "{{ .Values.messageBufferLen }}"
        - name: ACK_BUFFER_LENGTH
          value: "{{ .Values.ackBufferLen }}"
        {{- if .Values.requestMiddlewares }}
        - name: REQUEST_MIDDLEWARES_SOCKET
          value: "{{ $rqSocket }}"
        {{- end }}
        {{- if .Values.responseMiddlewares }}
        - name: RESPONSE_MIDDLEWARES_SOCKET
          value: "{{ $rpSocket }}"
        {{- end }}
        volumeMounts:
        - name: sockets
          mountPath: "/sockets"
        {{- if .Values.caCerts }}
        - name: cacerts
          mountPath: "/etc/ssl/certs"
          readOnly: true
        {{- end }}
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
{{- range $index, $values := .Values.requestMiddlewares }}
  {{ if $values.inSocket }}
    {{- if not ( eq ( add $index 1 ) ( len $.Values.requestMiddlewares ) ) }}
      {{- $rqSocket = $values.outSocket -}}
    {{- end }}
  {{ else }}
      - name: "{{ $values.name }}"
        image: "{{ $values.repository }}:{{ $values.tag }}"
        imagePullPolicy: {{ $values.pullPolicy }}
        env:
        {{- with $values.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: IN_SOCKET
          value: "{{ $rqSocket }}"
    {{- if not ( eq ( add $index 1 ) ( len $.Values.requestMiddlewares ) ) }}
        {{- if hasKey (index $.Values.requestMiddlewares ( add $index 1 )) "inSocket" }}
          {{- $rqSocket = (index $.Values.requestMiddlewares ( add $index 1 )).inSocket }}
        {{- else }}
          {{- $rqSocket = printf "passthrough:///unix:///sockets/%s" (randAlphaNum 10) }}
        {{- end }}
        - name: OUT_SOCKET
          value: "{{ $rqSocket }}"
    {{- end }}
        volumeMounts:
        - name: sockets
          mountPath: "/sockets"
      {{- with $.Values.extraVolumeMounts }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- end }}
{{- end }}
{{- range $index, $values := .Values.responseMiddlewares }}
  {{ if $values.inSocket }}
    {{- if not ( eq ( add $index 1 ) ( len $.Values.responseMiddlewares ) ) }}
      {{- $rpSocket = $values.outSocket -}}
    {{- end }}
  {{ else }}
      - name: "{{ $values.name }}"
        image: "{{ $values.repository }}:{{ $values.tag }}"
        imagePullPolicy: {{ $values.pullPolicy }}
        env:
        {{- with $values.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: IN_SOCKET
          value: "{{ $rpSocket }}"
    {{- if not ( eq ( add $index 1 ) ( len $.Values.responseMiddlewares ) ) }}
        {{- if hasKey (index $.Values.responseMiddlewares ( add $index 1 )) "inSocket" }}
          {{- $rpSocket = (index $.Values.responseMiddlewares ( add $index 1 )).inSocket }}
        {{- else }}
          {{- $rpSocket = printf "passthrough:///unix:///sockets/%s" (randAlphaNum 10) }}
        {{- end }}
        - name: OUT_SOCKET
          value: "{{ $rpSocket }}"
    {{- end }}
        volumeMounts:
        - name: sockets
          mountPath: "/sockets"
      {{- with $.Values.extraVolumeMounts }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- end }}
{{- end }}
      volumes:
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.tplExtraVolumes }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      {{- if .Values.caCerts }}
      - name: cacerts
        secret:
          secretName: "{{ include "homing-pigeon.fullname" . }}-cacerts"
      {{- end }}
      - name: sockets
        emptyDir:
          medium: "Memory"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
